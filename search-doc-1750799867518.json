{"searchDocs":[{"title":"Assignment 1","type":0,"sectionRef":"#","url":"/OPS345/Assignments/assignment1","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Assignment 1","url":"/OPS345/Assignments/assignment1#overview","content":" In this assignment, you will research and compare the offerings of three major public cloud providers, including AWS and two others of your choice. You will analyze the advantages and disadvantages of each provider, discuss scenarios where one may be preferred over the others in an organizational context, and examine how each supports hybrid cloud environments. Your submission must be between 3 and 4 pages in length and include a chart.  ","version":"Next","tagName":"h2"},{"title":"Submission​","type":1,"pageTitle":"Assignment 1","url":"/OPS345/Assignments/assignment1#submission","content":" Upload your assignment to the Assignment 1 folder on blackboard by the due date. Late submissions will receive a penalty of 10% per day.  ","version":"Next","tagName":"h2"},{"title":"Rubric​","type":1,"pageTitle":"Assignment 1","url":"/OPS345/Assignments/assignment1#rubric","content":" Your submission will be graded according to the following criteria:  Criteria\tMarkThree cloud providers\t1 Advantages and Disadvantages\t8 Scenarios describing organizational context\t4 Hybrid cloud support\t2 Total\t15 ","version":"Next","tagName":"h2"},{"title":"Assignment 2: Elastic Load Balancing and Auto Scaling","type":0,"sectionRef":"#","url":"/OPS345/Assignments/assignment2","content":"","keywords":"","version":"Next"},{"title":"Objectives of Assignment 2​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#objectives-of-assignment-2","content":" In this assignment, you will create a highly available environment for your Wordpress application using Elastic Load Balancing and Auto Scaling. This will build on the Wordpress deployment from Lab 9.  ","version":"Next","tagName":"h2"},{"title":"Investigation 1: Creating a Launch Template​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#investigation-1-creating-a-launch-template","content":" Open EC2 and navigate to Launch Templates under Instances.    Click Create launch template.  ","version":"Next","tagName":"h2"},{"title":"Launch template name and description​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#launch-template-name-and-description","content":" Under Launch template name and description, configure:  Launch template name: www-templateTemplate version description: Wordpress WWW instance  Under Auto Scaling guidance check the box to Provide guidance to help me set up a template that I can use with EC2 Auto Scaling  ","version":"Next","tagName":"h3"},{"title":"Launch template contents​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#launch-template-contents","content":" For Application and OS Images (Amazon Machine Image) select Currently in use  ","version":"Next","tagName":"h3"},{"title":"Instance type​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#instance-type","content":" Under Instance type select t2.micro Free tier eligible.  ","version":"Next","tagName":"h3"},{"title":"Key pair (login)​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#key-pair-login","content":" Under Key pair (login) select your osl745 key pair from the dropdown.  ","version":"Next","tagName":"h3"},{"title":"Network Settings​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#network-settings","content":" Firewall (security groups) select Select existing security group.Select Wordpress Website SG from the dropdown.Under Advanced network configuration, set Auto-assign public IP to Enable  Click Create launch template. Leave the confirmation screen open for investigation 2.  ","version":"Next","tagName":"h3"},{"title":"Investigation 2: Configuring Elastic Load Balancing and Auto Scaling​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#investigation-2-configuring-elastic-load-balancing-and-auto-scaling","content":" In this investigation you are going to configure Elastic Load Balancing and Auto Scaling for your www instance. These services allow you to take an application you have built and turn it into a high capacity available application: meaning users will not see any degradation in performance regardless of how many users are connected. In the case of your Wordpress site, you will not have a high number of users trying to access it at any given time. However, the concepts of auto scaling and load balancing are part of what has lead to the popularity of the cloud. Load balancing can also be done (on premises) using things like a hardware load balancer or by installing and configuring a service such as HA Proxy (on a unique server).  Amazon EC2 Auto Scaling helps you maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.  AWS auto scaling requires some configuration options, such as:  Metric: Metric used for your Auto Scaling trigger.Statistic: Statistic calculation the trigger should use, such as Average.Unit: Unit for the trigger metric, such as Bytes.Period: Specifies how frequently Amazon CloudWatch measures the metrics for your trigger.Breach duration: Amount of time, in minutes, a metric can be outside of the upper and lower thresholds before triggering a scaling operation.Upper threshold: If the metric exceeds this number for the breach duration, a scaling operation is triggered.Scale up increment: The number of Amazon EC2 instances to add when performing a scaling activity.Lower threshold: If the metric falls below this number for the breach duration, a scaling operation is triggered.Scale down increment: The number of Amazon EC2 instances to remove when performing a scaling activity.  ","version":"Next","tagName":"h2"},{"title":"Choosing a launch template​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#choosing-a-launch-template","content":" Click on Create Auto Scaling group.For Auto Scaling group name enter www-asgMake sure www-template is selected under Launch template.Scroll down and click Next  ","version":"Next","tagName":"h3"},{"title":"Choosing instance launch options​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#choosing-instance-launch-options","content":" Under VPC select Wordpress VPCUnder Availability Zones and subnets select: Public Subnet 1Public Subnet 2  Click Next.  ","version":"Next","tagName":"h3"},{"title":"Integrate with other services​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#integrate-with-other-services","content":" Under Load balancing select Attach to a new load balancer.Under Attach to a new load balancer select Application Load Balancer.For Load balancer name accept the default.For Load balancer scheme select Internet facing.Under Listeners and routing* enter Port 443.For Default routing (forward to) select Create a target group.Under New target group accept the default.  Scroll down and click Next.  ","version":"Next","tagName":"h3"},{"title":"Configure group size and scaling​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#configure-group-size-and-scaling","content":" Under Group size set Desired capacity to 2.Under Scaling limits select Min desired capacity: 1Max desired capacity: 4 Under Automatic scaling Select No scaling policies  Scroll down and click Next.  ","version":"Next","tagName":"h3"},{"title":"Add notifications​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#add-notifications","content":" Accept the defaults and click Next.  ","version":"Next","tagName":"h2"},{"title":"Add tags​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#add-tags","content":" Accept the defaults and click Next.  ","version":"Next","tagName":"h2"},{"title":"Review​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#review","content":" Scroll through and confirm everything matches the instructions. If everything looks correct, click Create Auto Scaling group.  ","version":"Next","tagName":"h2"},{"title":"Submission​","type":1,"pageTitle":"Assignment 2: Elastic Load Balancing and Auto Scaling","url":"/OPS345/Assignments/assignment2#submission","content":" Submit a screenshot of the two instances created via Auto Scaling in EC2. ","version":"Next","tagName":"h2"},{"title":"Lab 1 - Introduction Amazon Web Services (AWS)","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab1","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#overview","content":" This week's lab will cover the following:  Investigating the AWS Learner Lab.Using the AWS Console interface.Modifying Virtual Private Cloud (VPC) Security Groups.Exploring Amazon Elastic Cloud Compute (EC2).Adding an instance in AWS.Creating SSH key pairs &amp; paired key encryption.Creating a Dotfiles repository in GitHub.  ","version":"Next","tagName":"h2"},{"title":"Investigating the AWS Learner Lab​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#investigating-the-aws-learner-lab","content":" You should have received an email (in your Seneca Polytechnic email) from your professor inviting you to participate in the AWS Academy Learner Lab. If you have received and accepted this invitation you may proceed with this lab. If you have not received this invitation you should contact your professor immediately. You may continue with the rest of the lab once you have received the invitation. Here is a sample email.    The AWS Learner Lab provides a sandbox environment where you can build, configure and deploy AWS assets such as instances. There are some limitations as to what you can do, however it provides all the functionality we require for this course. You are limited to $50 credit at no cost within the learner lab. Once this runs out your learner lab will be disabled. Additionally, there is no way to add funds to this pool. If you follow the lab instructions properly you should not have any issues.  Once you have accepted your invitation and logged into the AWS Learner Lab navigate to Courses (on the left hand side) &gt; Modules &gt; Learner Lab. You should see a screen that looks like the following:  Some important things to note on this screen:  Start Lab: Starts the Learner Lab environment.  Stop Lab: Stops the Learner Lab environment.  Used $0 of $50: Shows the balance used of your $50 credit. If this hits $50 of $50 used, your learner lab is disabled. Be careful.  AWS with a red dot next to it: Once your lab has started, this will turn green. You can then click on this to open the environment.  ","version":"Next","tagName":"h2"},{"title":"Using the AWS Console interface​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#using-the-aws-console-interface","content":" Start your session in the Learner Lab by clicking on the Start Lab button. Once the red dot has turned green, click on it to enter the Learner Lab. This will take you to the AWS Console (depicted below), which will be where you will do most of your work. It also mirrors a production AWS interface. Note: Your screen may not look 100% identical to the one depicted, but should be mostly the same.  If you click on Services in the top left corner (beside the AWS logo), you will see all the services you can configure in the AWS learner lab. Common ones we will use are EC2 and VPC. You can search for these in the search bar, or browse the categories. Recently visited services will show up under the heading Recently visited. If you hover over any service you will see a greyed out star to the left of the name. You can click on this to add it to your favourites for easy access.  ","version":"Next","tagName":"h2"},{"title":"Modifying VPC Security Groups​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#modifying-vpc-security-groups","content":" An Amazon Virtual Private Cloud (VPC) is a dedicated virtual network within AWS' public cloud. It work similar to how a traditional network does in a data center. w3schools has some additional information.  Click on Services &gt; Compute &gt; EC2. Security Group settings are located in the left side navigation under Network &amp; Security &gt; Security Groups. Click on Security Groups.  Your screen should look like the following:  Make sure the box beside your Security Group is checked. Click on InBound rules &gt; Edit InBound Rules and add the following rule:  Type: SSH or Port Range: 22 (both will accomplish the same thing)The box beside the magnifying glass: 0.0.0.0/0Click Save Rules  This will allow incoming SSH connections from anywhere. We will use this in the next part to connect to your instance. The screenshot below shows what your inbound rules should look like:  ","version":"Next","tagName":"h2"},{"title":"Exploring Amazon Elastic Cloud Compute (EC2)​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#exploring-amazon-elastic-cloud-compute-ec2","content":" EC2 is where you will end up spending the most amount of time configuring things in this course. From here you can do things like launch instances, manage networking services and much more. To access EC2, click on Services (top left corner beside the AWS icon), and navigate to Compute &gt; EC2. You may wish to add this to your favourites for easy access by hovering over and clicking the star. Your initial screen should look something like the following. w3schools has some additional information    ","version":"Next","tagName":"h2"},{"title":"Adding an instance in AWS​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#adding-an-instance-in-aws","content":" Click on Launch instance just below the Resources pane. From the Launch an instance screen, select the following options:  Name: firstOS: UbuntuAmazon Machine Image (AMI): Make sure Ubuntu Sever 24.04 is selected  ","version":"Next","tagName":"h2"},{"title":"Creating SSH key pairs & using public key cryptography​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#creating-ssh-key-pairs--using-public-key-cryptography","content":" Under Key pair (login) click Create new key pair. Give it the name ops345, accept the rest of the defaults and click &quot;Create key pair&quot;. It will download to your default download location immediately.  Important: Do not lose your key pair or you will be unable to connect to your instance using SSH.  Under Network Settings click Select existing security group. Click the dropdown and check the default. Click Launch instance. Once it has finished completing (you should see a success message), click on the instance ID in the Success message. This will take you to Instances in EC2.  ","version":"Next","tagName":"h2"},{"title":"Accessing Your Instance​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#accessing-your-instance","content":" Click on the Instance ID for your first instance. click Connect.  Note there are a few ways to connect to your instance from here. The easiest to use are:  EC2 Instance Connect: Allows you to connect to your instance from within your web browser.SSH client: Allows you to connect to your instance using the SSH key pair (which you generated when you created the instance).  You can use either EC2 Instance Connect or connect using an SSH client to remotely access your new Linux VM remotely using SSH, which is a command-line (CLI) only protocol.  Connecting using EC2 Instance Connect​  Make sure you are on the EC2 Instance Connect tab. Note the username. Scroll down to the bottom, accept the defaults and click Connect. You should have command line access to your instance in your web browser. If the connection fails, double check your security group configuration and make sure ssh (port 22) has been allowed from 0.0.0.0/0 in the inbound settings, as indicated earlier in the lab.  ","version":"Next","tagName":"h3"},{"title":"Connecting via An SSH Client​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#connecting-via-an-ssh-client","content":" Windows: Use the built-in Command Prompt or PowerShell application.macOS/Linux: Use the built-in Terminal application.  For all clients​  In the Linux EC2 Instance details page, click the Connect button.In the new Connect to instance page, click on the SSH client tab.Copy the example command near the bottom of the page. (Use your example command)Choose the proper OS below and continue.  On Windows, Using Command Prompt or PowerShell:​  Open Command Prompt or PowerShell.Change directories to your default Downloads folder with the following command: cd Downloads (If you saved your .pem file elsewhere, navigate there. Or move the .pem file into Downloads.)Paste the example command from the Connect to instance page, and press Enter.The SSH command will ask you to confirm connecting. Type yes and press Enter.If login is successful, you should see a prompt like this:  ubuntu@ip-172-31-91-76:~$   To quit, type quit, exit or ctrl+d.  On macOS/Linux, Using Terminal:​  Open Terminal.Change directories to your default Downloads folder with the following command: cd Downloads (If you saved your .pem file elsewhere, navigate there. Or move the .pem file into Downloads.)Change the file permissions of your .pem file with this command: chmod 400 *.pemPaste the example command from the Connect to instance page, and press Enter.The SSH command will ask you to confirm connecting. Type yes and press Enter.If login is successful, you should see a prompt like this:  ubuntu@ip-172-31-91-76:~$   To quit, type quit, exit or ctrl+d.  ","version":"Next","tagName":"h3"},{"title":"Lab 1 Sign-Off​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#lab-1-sign-off","content":" Take a screenshot showing a successful connection to your instance. The following Exploration Questions are for furthering your knowledge only, and may appear on quizzes or tests at any time later in this course.  When you shut off your learner lab, all resources (such as instances) are shut off. You do not need to shut down your instance. It will be automatically started again the next time you start your learner lab. Shut down your learner lab by navigating to the Learner Lab home page and click End Lab.  ","version":"Next","tagName":"h2"},{"title":"Exploration Questions​","type":1,"pageTitle":"Lab 1 - Introduction Amazon Web Services (AWS)","url":"/OPS345/Labs/lab1#exploration-questions","content":" How do you start/stop the AWS learner lab?How do you enter the AWS learner lab once you have started it?What happens to your learner lab if your credits hit 50of50 of 50of50 used?Where do you go to edit networking configuration options such as security groups?Where do you go to launch an instance?What is an instance?What command do you use to access an instance in AWS from your command line?What is public-key cryptography? ","version":"Next","tagName":"h2"},{"title":"Lab 2 - Amazon Web Services (AWS) Networking","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab2","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#overview","content":" This week's lab will cover the following:  Creating a Virtual Private Cloud (VPC).Creating and Modifying Virtual Private Cloud (VPC) Security Groups.VPC components: SubnetsGateways NAT gatewaysInternet gatewaysEgress-only internet gatewaysCarrier gateways Route tables  In this lab, you will create all the networking infrastructure required to host a web application. You will be creating the server, database and configuring the application in future labs.  ","version":"Next","tagName":"h2"},{"title":"Virtual Private Cloud​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#virtual-private-cloud","content":" Start your session in the Learner Lab by clicking on the Start Lab button. Once the red dot has turned green, click on it to enter the Learner Lab and access the AWS Console interface. You are going to create a new Virtual Private Cloud (VPC). Resources you created last week in Lab 1 will be inaccessible in this VPC. Navigate to VPC (which you may have added to your favourites last week). On the VPC dashboard, click Create VPC. See the following screenshot for reference.    Input the following settings:  Select VPC onlyName tag: Wordpress VPCIPv4 CIDR: 10.0.0.0/16Leave all other settings on default  Confirm the settings match the following screenshot.    Click Create VPC at the bottom right.  Once created, click the Actions drop down in the top right corner and select Edit VPC Settings. Make sure the following boxes are Checked:  Enable DNS resolution: CheckedEnable DNS hostnames: Checked  Click Save  ","version":"Next","tagName":"h3"},{"title":"Subnets​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#subnets","content":" You are going to create 4 subnets in your VPC. Two private subnets, and two public subnets. One of each type (private and public) will be in a different availability zone. This will provide redundancy, ensuring better uptime for servers and applications you create in your VPC.  Click on Subnets (located on the left side under Virtual private cloud).Click Create subnet (top right corner).Select Wordpress VPC from the VPC ID dropdown.Create a subnet with the following information:  Subnet Name: Private Subnet 1Availability Zone: us-east-1aIPv4 VPC CIDR block: 10.0.0.0/16IPv4 subnet CIDR block: 10.0.1.0/24Your screen should look as follows:    Click Add new subnet and repeat the process for the following three subnets:  Create one private IPv4 subnets in this VPC:  Private Subnet 2 - 10.0.2.0/24 - us-east-1b  Create two public IPv4 subnets in this VPC:  Public Subnet 1 - 10.0.11.0/24 - us-east-1aPublic Subnet 2 - 10.0.12.0/24 - us-east-1b  Once you have confirmed your settings are correct, scroll down and click Create Subnet in the bottom right.  Check the box beside Public Subnet 1. Click on the Actions dropdown (top right) and select Edit subnet settings. See the following screenshot.    Make sure the following are Checked:  Enable auto-assign public IPv4 address: Checked Enable resource name DNS A record on launch: Checked Click Save. Repeat the process for Public Subnet 2  ","version":"Next","tagName":"h3"},{"title":"Adding an Internet Gateway​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#adding-an-internet-gateway","content":" Your VPC requires a Gateway to access outside resources. There are four types of gateways  Internet Gateway​  An internet gateway is a horizontally scaled, redundant, and highly available VPC component that allows communication between your VPC and the internet. It supports IPv4 and IPv6 traffic. It does not cause availability risks or bandwidth constraints on your network traffic.  An internet gateway enables resources in your public subnets (such as EC2 instances) to connect to the internet if the resource has a public IPv4 address or an IPv6 address. Similarly, resources on the internet can initiate a connection to resources in your subnet using the public IPv4 address or IPv6 address. For example, an internet gateway enables you to connect to an EC2 instance in AWS using your local computer.  Egress-only Internet Gateway​  An egress-only internet gateway is a horizontally scaled, redundant, and highly available VPC component that allows outbound communication over IPv6 from instances in your VPC to the internet, and prevents the internet from initiating an IPv6 connection with your instances.  An egress-only internet gateway is for use with IPv6 traffic only. To enable outbound-only internet communication over IPv4, use a NAT gateway instead.  Carrier Gateway​  A carrier gateway is a VPC component that allows connectivity between AWS and your on-premises network using AWS Direct Connect or AWS Site-to-Site VPN. It is specifically designed for use with AWS Outposts, enabling communication between your Outposts and the internet, or between your Outposts and other AWS services. The carrier gateway supports both IPv4 and IPv6 traffic and provides a highly available and redundant connection.  A carrier gateway is used when you need to connect your Outposts to the internet or to other AWS services, ensuring that your on-premises applications can communicate seamlessly with AWS resources.  NAT Gateway​  A NAT gateway is a Network Address Translation (NAT) service. You can use a NAT gateway so that instances in a private subnet can connect to services outside your VPC but external services cannot initiate a connection with those instances.  When you create a NAT gateway, you specify one of the following connectivity types:  Public – (Default) Instances in private subnets can connect to the internet through a public NAT gateway, but cannot receive unsolicited inbound connections from the internet. You create a public NAT gateway in a public subnet and must associate an elastic IP address with the NAT gateway at creation. You route traffic from the NAT gateway to the internet gateway for the VPC. Alternatively, you can use a public NAT gateway to connect to other VPCs or your on-premises network. In this case, you route traffic from the NAT gateway through a transit gateway or a virtual private gateway. Private – Instances in private subnets can connect to other VPCs or your on-premises network through a private NAT gateway. You can route traffic from the NAT gateway through a transit gateway or a virtual private gateway. You cannot associate an elastic IP address with a private NAT gateway. You can attach an internet gateway to a VPC with a private NAT gateway, but if you route traffic from the private NAT gateway to the internet gateway, the internet gateway drops the traffic.  A NAT gateway is for use with IPv4 traffic only. To enable outbound-only internet communication over IPv6, use an egress-only internet gateway instead.  You are going to create an Internet Gateway.  Click on Internet Gateways (located on the left side under Virtual private cloud).Click Create internet gateway (located in the top left corner)  Create a new Internet Gateway with the following:  Name: Wordpress GatewayClick Create internet gatewayOnce created, click on the Actions dropdown and select Attach to VPC.In the Available VPCs input field, select your Wordpress VPC.Click Attach internet gateway to attach it to your Wordpress VPC.Once completed, your Wordpress Gateway should display the following:    ","version":"Next","tagName":"h3"},{"title":"Route Tables​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#route-tables","content":" You are going to create Route tables in your VPC to allow traffic from within your VPC to be routed externally through the Internet Gateway you created. In the search box at the top, type VPC.  Click on Route Tables (located on the left side under Virtual private cloud. See screenshot for clarity).    Click on your Route table ID. Find your default route table for your Wordpress VPC and add the name: VPC-local Route Table Go back to the main Route Tables screen. Click Create route table (top right corner).  Create a second route table:  Name: Wordpress Website Route TableVPC: Wordpress VPC    Click Create route table (bottom right corner).Click Edit routes and add the following routes. The first route may already exist.  Route Entry 1: Destination: 10.0.0.0/16Target: local Route Entry 2: Destination: 0.0.0.0/0Target: Internet Gateway – Wordpress Gateway  View the following screenshot to confirm your settings are correct. If they are, click Save changes.    ","version":"Next","tagName":"h3"},{"title":"Security Groups​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#security-groups","content":" Security Group settings are located in the left side navigation under Security &gt; Security Groups. Click on Security Groups. Note: You can access Security groups through EC2 as well (as you did in lab 5). The menu they are under is different.  Click on Create security group and create a security group with the following settings  Security group name: Wordpress Website SGDescription: Allows HTTP traffic inboundVPC: Wordpress VPCInbound Rules:Allow HTTP  Type: HTTPSource: Anywhere – IPv4 (0.0.0.0/0)  Allow SSH  Type: SSHSource: Anywhere – IPv4 (0.0.0.0/0)  Warning: Do not modify the outbound rules.  Verify your inbound rules with the following screenshot.    Click Create security group (bottom right).  Repeat the above steps to create another security group with the following settings:  Name: Wordpress Database SGDescription: Allows MySQL traffic locallyVPC: Wordpress VPCInbound Rule:  Type: MYSQL/AuroraSource: Custom (Select Wordpress Website SG in the search field)  Warning: Do not modify the outbound rules.  Verify your inbound rules with the following screenshot.    ","version":"Next","tagName":"h3"},{"title":"Editing Public Subnet route table associations​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#editing-public-subnet-route-table-associations","content":" Click on Subnets under Virtual private cloud (left side). Check the box beside Public Subnet 1Edit both public subnets’ route table associations to: Wordpress Website Route Table Click Actions &gt; Edit route table association Select Wordpress Website Route Table in the Route table ID dropdown menu. See the following screenshot. Click save.  Repeat the steps for Public Subnet 2  ","version":"Next","tagName":"h3"},{"title":"Creating a new instance (www)​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#creating-a-new-instance-www","content":" Create a new instance in AWS (like you did in Lab 5), with the following configuration:  Name: wwwOS: UbuntuAmazon Machine Image (AMI): Make sure Ubuntu Server 24.04 is selectedUse your existing key pair (from Lab 5). If you lost your key, then generate a new one. Don't lose this one.Network Settings: Click edit  VPC: Select the Wordpress VPC you created.Security Group: Select the Wordpress Website Security Group you created.Subnet: Select Public Subnet 1  Verify your settings are correct and click Launch Instance.  Once the instance has created, confirm you can connect to it using:  EC2 Instance ConnectFrom the terminal in Codespaces. (If you had to generate a new key, you will need to update the Repository secret for your Dotfiles repo containing the key)  ","version":"Next","tagName":"h2"},{"title":"Lab 2 Sign-Off​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#lab-2-sign-off","content":" Take screenshots showing the following:  4 new subnets (Public Subnet 1, Public Subnet 2, Private Subnet 1 &amp; Private Subnet 2)Route TableInternet GatewayAccess to www from EC2 Instance Connect or the command line  The following Exploration Questions are for furthering your knowledge only, and may appear on quizzes or tests at any time later in this course.  ","version":"Next","tagName":"h2"},{"title":"Exploration Questions​","type":1,"pageTitle":"Lab 2 - Amazon Web Services (AWS) Networking","url":"/OPS345/Labs/lab2#exploration-questions","content":" What is a VPC?What are the steps to create a VPC?What are subnets and route tables?What is an Internet Gateway? ","version":"Next","tagName":"h2"},{"title":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab3","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#overview","content":" This week's lab will cover the following:  Managing Linux packages and updating the system.Managing Linux services.Modifying Virtual Private Cloud (VPC) Security Groups.Implementing an elastic IP in AWS.Accessing your Web Server using a browser.  ","version":"Next","tagName":"h2"},{"title":"Managing Linux packages and updating the system​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#managing-linux-packages-and-updating-the-system","content":" Installing software in Linux requires both an active Internet connection and knowledge of which package management tool to use for your distribution (or distro). Linux software and updates come from special sources hosted on other servers, known as repositories (or repos). All the major Linux distros host their own repos, though anyone can host a repository for a distribution - and many organizations do. Due to the Open Source nature of Linux, certain repos may contain specialized software that is not available in the main repository (such as EPEL - Extra Packages for Enterprise Linux); or they may contain a mirror of the main repo. Accessing these and installing software requires using your Linux distro's command line package management tool. The major ones you will encounter when you use Linux are:  APT (Aptitude Package Manager): This is used in Debian based Linux distributions such as Ubuntu, Linux Mint, and Kali Linux.DNF (Dandified Yum): Which is an update of YUM (Yellowdog Updater, Modified). Both of these operate as a front end for RPM (Red Hat Package Manager). These are used in Red Hat based Linux distros.Pacman (Pacman Package Manager): This is used in Arch Linux, as well as a few others.Zypper Package Manager: This is used in OpenSUSE, which is popular for use on servers in Europe.  Since you are using Ubuntu, you will be using APT to install software and update the system.  ","version":"Next","tagName":"h2"},{"title":"Updating www and installing Apache​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#updating-www-and-installing-apache","content":" Start your www instance in the AWS Learner Lab, and connect to it using SSH. Once you have logged in, issue the following command to update your system.  sudo apt update &amp;&amp; sudo apt upgrade   Now that your system is up to date it's time to install Apache, which is the software that will be powering your web server. In Ubuntu, the Apache package is called apache2. Additionally, you can use apt with the -y option to auto assume yes. This can save a little time when you know you want to install the software or updates.  sudo apt -y install apache2   ","version":"Next","tagName":"h2"},{"title":"Managing Linux services​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#managing-linux-services","content":" Normally the next thing you would want to do is start the service using the systemctl command, then confirm it is running. However, when you installed Apache2 this was automatically done. It's still a good idea to confirm the service is running. The systemctl command always requires elevated privileges, and follows the same format:  start: Starts the service.stop: Stops the service.restart: Restarts the service.status: Displays information about the current status of the service, such as whether is running or not.enable: Configures the service to start automatically on boot.disable: Prevents the service from starting automatically on boot.  This isn't a complete list, but it covers all of the things you will require for most system administration tasks. Using what you have just learned, check to see if the apache2 service is running.  sudo systemctl status apache2   You should see the following output:  ","version":"Next","tagName":"h2"},{"title":"Accessing your Apache server through web browser​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#accessing-your-apache-server-through-web-browser","content":" It's time to test to see if everything's working properly. Browse to your instance details in EC2 by clicking on Instances, then the Instance ID next to your www instance (screenshot below).    Click open address beside your Public IPv4 address. You should see the default Apache test page (screenshot below). If you do not, edit your url and change https:// to http://. You will learn how to configure https in lab 4. Accessing your server through http will be fine until then.    ","version":"Next","tagName":"h2"},{"title":"Implementing an elastic IP in AWS​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#implementing-an-elastic-ip-in-aws","content":" When you are configuring network resources such as (routers, network printers or servers) you want them to have a static IP, which doesn't change. Currently our AWS instance pulls a new IP from Amazon's DHCP server every time it boots up. Fortunately, you can configure a static IP through what AWS calls an Elastic IP. These cost money when they're not in use, and will be the biggest expense item from our free $50 credits this semester (since your instance will be offline unless you are working on things for this course). To obtain an Elastic IP in EC2, click on Elastic IPs under Network &amp; Security:  Then click Allocate Elastic IP address in the top right corner. On the bottom of the new screen, leave the rest of the defaults and click Allocate (screenshot below).  Now you've reserved your Elastic IP. It is yours for as long as you want (which will be the entire semester). However, you need to associate it with the instance you want to access it through (in this case, www). To do that check the box beside your Elastic IP, then click the Actions drop down and click Associate Elastic IP address.  Next, click on the Instance box and select the instance with (www) in the name (screenshot below), and click Associate in the bottom right corner.  Now you can access your www instance from anywhere by using the same IP address. You should write this IP down somewhere for future use. You will be mapping a domain name to it in lab 4.  ","version":"Next","tagName":"h2"},{"title":"Accessing your Apache server from a web browser​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#accessing-your-apache-server-from-a-web-browser","content":" Open a web browser and either copy/paste, or type out your elastic IP in the address bar (make sure the url is being requested using http and not https) to confirm you can still access your Apache test page.  ","version":"Next","tagName":"h2"},{"title":"Lab 3 Sign-Off​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#lab-3-sign-off","content":" Take screenshots showing the following:  Your Elastic IPAccessing your Apache2 Ubuntu Default Page through a web browser using http  ","version":"Next","tagName":"h2"},{"title":"Exploration Questions​","type":1,"pageTitle":"Lab 3 - Configuring an Apache web server in Amazon Web Services (AWS)","url":"/OPS345/Labs/lab3#exploration-questions","content":" What package manager does Ubuntu use?How do you find the current status of the apache2 service?What is an Elastic IP?What is the difference between HTTP and HTTPS? ","version":"Next","tagName":"h2"},{"title":"Lab 4 - DNS & SSL","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab4","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#overview","content":" This week's lab will cover the following:  Using a service to register a domain nameGenerating TLS/SSL certificates with Let's Encrypt &amp; CertbotConfiguring https on your Apache web server  ","version":"Next","tagName":"h2"},{"title":"Registering a domain name​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#registering-a-domain-name","content":" You should have received an email indicating you have access to My.Custom.Domain. You will be using this to create an A record and map it to the elastic IP of your instance from Lab 3. If you do not have access please contact your professor so you can proceed.  ","version":"Next","tagName":"h2"},{"title":"Creating an A record​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#creating-an-a-record","content":" Login to My.Custom.Domain. You should see a screen similar to the one below.    Click Create DNS Records.  On the following screen, click Create your first DNS Record!, and fill in the following information (see the following screenshot for an example)  Name: wwwType: A Record (IPv4 Address)Value: your elastic IPCourse: OPS345Description: Address record for www instance.  Click Create.    ","version":"Next","tagName":"h3"},{"title":"Testing Your DNS configuration​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#testing-your-dns-configuration","content":" Launch the AWS Learner Lab and login. Make sure your www instance is running.Next, login to your first instance and issue the following commands. Note the output of each. Substitute your username in the provided commands.  nslookup www.yourusername.mystudentproject.ca   and  dig www.yourusername.mystudentproject.ca   Access dig via the Google Admin ToolBox and enter the value www.yourusername.mystudentproject.ca into the Name field (make sure the record type is set to A). You should see output similar to the following:    Provided all of the above displayed the correct output, open a web browser and type www.yourusername.mystudentproject.ca (replace your username) in the URL bar of a web browser. This could be on your PC, or any device. You should see your website from Lab 3! If you don't, double check and make sure you see http:// and not https://.  Make sure you see the correct output from the previous commands indicating your DNS is working before proceeding to the next step.  Note: You can now login via SSH (from the command line) using your FQDN! Use the command ssh ubuntu@www.username.mystudentproject.ca  ","version":"Next","tagName":"h3"},{"title":"Preparing your system to generate and install an SSL certificate​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#preparing-your-system-to-generate-and-install-an-ssl-certificate","content":" Login to your www instance. You are going to install Certbot, which will automate configuring HTTPS using Let's Encrypt.  ","version":"Next","tagName":"h2"},{"title":"Installing Certbot​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#installing-certbot","content":" First, check to see if it is available by issuing the following command.  sudo apt search certbot   You should see the following output.    Once you have confirmed it is available, install it.  sudo apt -y install certbot python3-certbot-apache   ","version":"Next","tagName":"h3"},{"title":"Configuring an Apache Virtual Host​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#configuring-an-apache-virtual-host","content":" Create the and edit a file for your virtual host configuration. You can use either vi or nano. Replace wwwusernamemystudentprojectca with your domain name, with the www and top level domain, but without the dots(.). This will allow Certbot to find the correct VirtualHost block and update it.  sudo nano /etc/apache2/sites-available/wwwusernamemystudentprojectca.conf   Enter the following text (again, replacing the username with yours).  ServerName www.jasoncarman.mystudentproject.ca   Save your file and exit (ctrl + x).  ","version":"Next","tagName":"h3"},{"title":"Testing and Reloading the Apache configuration​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#testing-and-reloading-the-apache-configuration","content":" Enter the following command to test your Apache configuration.  sudo apache2ctl configtest   You should see a message indicating Syntax OK. If you don't, double check your file name and contents for errors. Sample output follows.    Now you can reload apache2 using systemctl.  sudo systemctl reload apache2   ","version":"Next","tagName":"h3"},{"title":"Generating an SSL certificate using Let's Encrypt and Certbot​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#generating-an-ssl-certificate-using-lets-encrypt-and-certbot","content":" Now you are ready to generate your SSL certificate using Certbot. You are going to configure Apache to reconfigure and reload the configuration whenever necessary. This way you do not need to worry about updating your SSL certificate every 90 days, which is when certificates issued through Let's Encrypt and Certbot expire. Issue the following command:  sudo certbot --apache   At the email address prompt, enter your Seneca Polytechnic issued email.  Accept the terms of service. Answer as you wish for sharing your email, then enter your domain name. See the following example.  Update your Wordpress Website SG security group rules to allow incoming HTTPS traffic from the anywhere IP: 0.0.0.0/0  ","version":"Next","tagName":"h2"},{"title":"Testing your configuration​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#testing-your-configuration","content":" Open a web browser try to access your Apache test page using HTTPS. It should work! Your screen should look similar to the following.  ","version":"Next","tagName":"h2"},{"title":"Lab 4 Sign-Off​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#lab-4-sign-off","content":" Take screenshots showing the following:  Accessing your Apache2 Ubuntu Default Page through a web browser using https and showing your fully qualified domain name (FQDN).  ","version":"Next","tagName":"h2"},{"title":"Exploration Questions​","type":1,"pageTitle":"Lab 4 - DNS & SSL","url":"/OPS345/Labs/lab4#exploration-questions","content":" What port did you have to allow inbound in the Wordpress Website SG security group?What service (command) did you use to generate your TLS/SSL certificate?What is certbot? ","version":"Next","tagName":"h2"},{"title":"Lab 7 - Simple Storage Service (S3) Glacier","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab7","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 7 - Simple Storage Service (S3) Glacier","url":"/OPS345/Labs/lab7#overview","content":"","version":"Next","tagName":"h2"},{"title":"Lab 8 - Elastic Beanstalk","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab8","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#overview","content":" This week's lab will cover the following:  Creating a new RDSConfiguring Elastic BeanstalkInstalling and configuring Wordpress  When you have installed Wordpress previously, you simply uploaded the source code and the first time you load the webpage, provided the database connector information. However, Elastic Beanstalk applications are meant to be disposable.  Normally, when you add that database connector info, it is saved in a file called wp-config.php on the webserver VM. This is fine for a traditional setup. However, in Elastic Beanstalk, changes made to static HTML or PHP are not saved if the Beanstalk application restarts, which it will do often. Whenever the application restarts, it will reload from the source zip file and the original, empty connector file. If you did this the traditional way, you'd have to constantly re-enter your DB connector info every time you started up your Learner Lab environment.  We could add the DB connector info to wp-config.php manually before we upload the source code, but there's a much better way.  We use environment variables to allow us to put all the info in the Elastic Beanstalk application wizard directly. That way, every time the application restarts and reloads from the source code zip, it'll then read our saved connector information from AWS itself. Read below for details and steps.  Note: All other information, like the Wordpress website name, users, theme settings, blog posts, etc., are saved in the actual database you created in RDS. This database does not get reset when the Elastic Beanstalk application restarts, so your actual blog data will remain intact.  ","version":"Next","tagName":"h2"},{"title":"Investigation 1: Creating a RDS instance​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#investigation-1-creating-a-rds-instance","content":" Start your session in the Learner Lab by clicking on the Start Lab button. Once the red dot has turned green, click on it to enter the Learner Lab and access the AWS Console interface. You are going to create a new RDS instance.  From the Console Home navigate to Database &gt; RDS. See the following screenshot for reference.    Click Create database (part way down the screen). Use the following options.  Standard createEngine type: MariaDBEngine Version: MariaDB 11.4.4 (or current latest version available)Templates: Free tierDB instance identifier: wordpress-elasticbeanstalkMaster username: adminCredentials management: Self ManagedAuto generate a password: CheckedDB instance class: db.t3.microAllocated storage: 5 GiBEnable storage autoscaling: UncheckedVirtual private cloud (VPC): Wordpress VPCDB subnet group: Create new DB Subnet Group (if you're redoing your database creation, there will already be an entry here. Make sure you're using the Wordpress VPC in the setting above!)Public access: NoVPC security group: Choose existingExisting VPC security groups: Remove default VPCAdd Wordpress Database SG (look to see that it's there below the dropdown after you select it) Availability Zone: us-east-1aMonitoring &gt; Enable Enhanced monitoring: UncheckedBelow the Monitoring section, Additional configuration &gt; Initial database name: wordpress (Write the database name down! You will need this later.)Enable automated backups: UncheckedEnable encryption: Unchecked  Click Create database.  This will take a few minutes to create. Once the database has finished creating, click on the View connection details button by the green success message at the top of the page. This gives you your database password.  Store the following connection information about your RDS instance in your lab logbook or a saved document. You'll need it later:  EndpointInitial database nameMaster usernameMaster password  ","version":"Next","tagName":"h2"},{"title":"Connecting to your database from www​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#connecting-to-your-database-from-www","content":" Login to your www instance, and issue the following command to connect to your database. Be sure to substitute the credentials you wrote down earlier.  mysql -u admin -h **endpoint** -p   Enter your Master password when prompted. You should see the following screen indicating a successful connection.    Issue the following command to display the databases.  show databases;   Disconnect from the database.  quit;   ","version":"Next","tagName":"h3"},{"title":"Investigation 2: Wordpress Source Code Modification​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#investigation-2-wordpress-source-code-modification","content":" ","version":"Next","tagName":"h2"},{"title":"Download and Unzip - Local Computer​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#download-and-unzip---local-computer","content":" On your local computer, download the current Wordpress source code from here: https://wordpress.org/latest.zipUnzip the file. You should end up with a wordpress directory. (Do not delete the original .zip file)  ","version":"Next","tagName":"h3"},{"title":"Modify Wordpress Configuration File​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#modify-wordpress-configuration-file","content":" Duplicate and Open Configuration File​  In the local wordpress folder, find a file called: wp-config-sample.phpDuplicate this file, and call it: wp-config.phpOpen wp-config.php in a text editor. You will want something that supports syntax highlighting., such as the default (graphical) text editor in Ubuntu, or something fancier like Visual Studio Code.  Adding Database Connector Info as Environment Variables​  In this file (wp-config.php), you will be adding database connector information as environment variables, not the actual connector information. (We'll add that information later.)  Find the following lines and add the bolded values:  define('DB_NAME', getenv('DB_NAME'));define('DB_USER', getenv('DB_USER'));define('DB_PASSWORD', getenv('DB_PASSWORD'));define('DB_HOST', getenv('DB_HOST'));  Adding Authentication Unique Keys and Salts as Environment Variables​  In the same file (wp-config.php), you'll be adding the authentication keys and salts as environment variables.  Find the following lines and add the bolded values:  define('AUTH_KEY', getenv('AUTH_KEY'));define('SECURE_AUTH_KEY', getenv('SECURE_AUTH_KEY'));define('LOGGED_IN_KEY', getenv('LOGGED_IN_KEY'));define('NONCE_KEY', getenv('NONCE_KEY'));define('AUTH_SALT', getenv('AUTH_SALT'));define('SECURE_AUTH_SALT', getenv('SECURE_AUTH_SALT'));define('LOGGED_IN_SALT', getenv('LOGGED_IN_SALT'));define('NONCE_SALT', getenv('NONCE_SALT'));  Figure 1: Adding database connector information to wp-config.php.  Save the file.  ","version":"Next","tagName":"h3"},{"title":"Zip As New File and Rename - Local Computer​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#zip-as-new-file-and-rename---local-computer","content":" Find the wordpress folder on your local computer.Zip the entire wordpress directory, not just the files inside. (Use the zip compression protocol. Don't use something else like .rar.)Rename your new zip file: wordpress-6.7.2-modded.zip (Use whatever version the source zip file has.)  ","version":"Next","tagName":"h3"},{"title":"Investigation 3: Elastic Beanstalk​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#investigation-3-elastic-beanstalk","content":" Navigate to Compute &gt; Elastic Beanstalk. See the following screenshot for reference.    Click Create application, and use the following settings:  ","version":"Next","tagName":"h2"},{"title":"Environment Tier​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#environment-tier","content":" Select: Web server environment  ","version":"Next","tagName":"h3"},{"title":"Main settings​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#main-settings","content":" Application name: wordpressEnvironment name: Wordpress-envPlatform: PHPPlatform branch: PHP 8.4 (or current latest)Application code: Upload your codeVersion label: wordpress-6.7.2 (Use the version from your zip filename)Local file: wordpress-6.7.2-modded.zip (From your local computer)Presets: Single instance (free tier eligible)  Click next  ","version":"Next","tagName":"h3"},{"title":"Configure Service Access​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#configure-service-access","content":" Select: Use an existing service role  Service role: LabRoleEC2 key pair: vockeyIAM instance profile: LabInstanceProfile  Click next  ","version":"Next","tagName":"h3"},{"title":"Set up networking, database and tags​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#set-up-networking-database-and-tags","content":" VPC: Wordpress VPC  Instance Settings​  Public IP address: CheckedInstance subnets: Public Subnet 1, Public Subnet 2 (both checked)  Click next  Database settings​  Database subnets: Private Subnet 1, Private Subnet 2 (both checked)  Click Enable database  Username: adminPassword: The password you copied and wrote down earlier  Click next  ","version":"Next","tagName":"h3"},{"title":"Configure instance traffic and scaling​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#configure-instance-traffic-and-scaling","content":" EC2 Security Groups: Wordpress Website SG &amp; Wordpress Database SG (both checked)Leave the rest default  Click next  ","version":"Next","tagName":"h3"},{"title":"Configure updates, monitoring and logging​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#configure-updates-monitoring-and-logging","content":" Monitoring​  System: Basic  Managed platform updates​  Managed updates: Unchecked  Email notifications​  Email notification: Add your Seneca email  Platform Software​  Before beginning this section, you will need two things:  Your database connector information (you saved this, right?)Randomly generated auth keys and salts from here: https://api.wordpress.org/secret-key/1.1/salt/ (it's a good idea to save these in a text file, too)  Container Options​  Proxy server: ApacheDocument root: /wordpressClick Add environment property and add the following Environment properties DB_HOST: your RDS database URLDB_NAME: wordpressDB_USER: adminDB_PASSWORD: your auto-generated database passwordAUTH_KEY: (use gathered info from salt page)SECURE_AUTH_KEY: (use gathered info from salt page)LOGGED_IN_KEY: (use gathered info from salt page)NONCE_KEY: (use gathered info from salt page)AUTH_SALT: (use gathered info from salt page)SECURE_AUTH_SALT: (use gathered info from salt page)LOGGED_IN_SALT: (use gathered info from salt page)NONCE_SALT: (use gathered info from salt page)  Hint: None of these values should have single quotes in them. (i.e. ')  Figure 2: Adding database connector information, auth keys and salts to your Elastic Beanstalk application as static Environment Variables.  Click next.  Review options​  Review all settings and ensure they match the instructions above. Once you hit Submit, the application will take several minutes to create.  ","version":"Next","tagName":"h3"},{"title":"Create the application.​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#create-the-application","content":" click Submit when ready.  While you wait for the creation to complete, check your e-mail to confirm your notification subscription.  ","version":"Next","tagName":"h3"},{"title":"Investigation 4: Accessing Wordpress​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#investigation-4-accessing-wordpress","content":" Open the URL presented in the Wordpress EBS instance and begin the site setup.  ","version":"Next","tagName":"h2"},{"title":"Site Information​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#site-information","content":" Set the following site information:  Site Title: Your name's blogUsername: yourSenecaUsernamePassword: Choose a strong password (do not reuse the DB password!)Your Email: yourSenecaEmailAddressSearch engine visibility: Unchecked  If you get a message indicating a failure to connect, make sure you zipped the wordpress folder and it's contents only. You can rezip the file and click Upload and deploy if necessary.  ","version":"Next","tagName":"h3"},{"title":"Blog Post:​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#blog-post","content":" Add a blog post detailing the following:  What did you think of this lab?What was the most difficult part for you?What was the easiest part for you?How did you find this course?  ","version":"Next","tagName":"h3"},{"title":"Lab 10 Sign-Off (Show Instructor)​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#lab-10-sign-off-show-instructor","content":" Show your professor the following:  Your blog post.  ","version":"Next","tagName":"h2"},{"title":"Exploration Questions​","type":1,"pageTitle":"Lab 8 - Elastic Beanstalk","url":"/OPS345/Labs/lab8#exploration-questions","content":" What is Elastic BeanstalkHow is this lab similar to the wordpress install in Lab 9 and Assignment 1? How is it different? ","version":"Next","tagName":"h2"},{"title":"Lab 5 - RDS","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab5","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 5 - RDS","url":"/OPS345/Labs/lab5#overview","content":" This week's lab will cover the following:  Creating a Relational Database Service (RDS) instanceConnecting to your RDS  In this lab, you will create a database using the Relational Database Service. You will then test connecting to it from your www instance. You will use this database in lab 8 to install and deploy Wordpress using Elastic Beanstalk.  ","version":"Next","tagName":"h2"},{"title":"Creating a RDS instance​","type":1,"pageTitle":"Lab 5 - RDS","url":"/OPS345/Labs/lab5#creating-a-rds-instance","content":" Start your session in the Learner Lab by clicking on the Start Lab button. Once the red dot has turned green, click on it to enter the Learner Lab and access the AWS Console interface. You are going to create a new RDS instance.  From the Console Home navigate to Database &gt; RDS. See the following screenshot for reference.    Click Create database (part way down the screen). Use the following options.  Standard createEngine type: MariaDBEngine Version: MariaDB 11.4.4 (or current latest version available)Templates: Free tierDB instance identifier: wordpress-dbMaster username: adminCredentials management: Self ManagedAuto generate a password: CheckedDB instance class: db.t3.microAllocated storage: 5 GiBEnable storage autoscaling: UncheckedVirtual private cloud (VPC): Wordpress VPCDB subnet group: Create new DB Subnet Group (if you're redoing your database creation, there will already be an entry here. Make sure you're using the Wordpress VPC in the setting above!)Public access: NoVPC security group: Choose existingExisting VPC security groups: Remove default VPCAdd Wordpress Database SG (look to see that it's there below the dropdown after you select it) Availability Zone: us-east-1aMonitoring &gt; Enable Enhanced monitoring: UncheckedBelow the Monitoring section, Additional configuration &gt; Initial database name: wordpress (Write the database name down! You will need this later.)Enable automated backups: UncheckedEnable encryption: Unchecked  Click Create database.  This will take a few minutes to create. Once the database has finished creating, click on the View connection details button by the green success message at the top of the page. This gives you your database password.  Store the following connection information about your RDS instance in your lab logbook or a saved document. You'll need it later:  EndpointInitial database nameMaster usernameMaster password  ","version":"Next","tagName":"h2"},{"title":"Connecting to your database from www​","type":1,"pageTitle":"Lab 5 - RDS","url":"/OPS345/Labs/lab5#connecting-to-your-database-from-www","content":" Login to your www instance, update the system and install the mariadb client.  sudo apt -y update &amp;&amp; sudo apt -y upgrade sudo apt install mariadb-client-core   From your terminal, issue the following command to connect to your database. Be sure to substitute the credentials you wrote down earlier.  mysql -u admin -h **endpoint** -p   Enter your Master password when prompted. You should see the following screen indicating a successful connection.    Issue the following command to display the databases.  show databases;   Disconnect from the database.  quit;   ","version":"Next","tagName":"h2"},{"title":"Installing and Configuring Wordpress​","type":1,"pageTitle":"Lab 5 - RDS","url":"/OPS345/Labs/lab5#installing-and-configuring-wordpress","content":" Install Wordpress using apt.  sudo apt -y install wordpress   Create a virtual host file (using nano or vim) in /etc/apache2/sites-available/wordpress.conf with the following contents:  Alias /blog /usr/share/wordpress &lt;Directory /usr/share/wordpress&gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Order allow,deny Allow from all &lt;/Directory&gt; &lt;Directory /usr/share/wordpress/wp-content&gt; Options FollowSymLinks Order allow,deny Allow from all &lt;/Directory&gt;   Enable the new WordPress site  sudo a2ensite wordpress   Use systemctl to restart the apache service.  Edit the file (using vim or nano) /etc/wordpress/config-www.username.mystudentproject.ca.php where username is your Seneca username. Add the following contents (changing values where appropriate).  &lt;?php define('DB_NAME', 'wordpress'); define('DB_USER', 'admin'); define('DB_PASSWORD', 'yourdbpassword'); define('DB_HOST', 'yourdbendpoint'); define('WP_CONTENT_DIR', '/usr/share/wordpress/wp-content'); ?&gt;   Open a web browser and enter the following url: https://www.username.mystudentproject.ca/blog/wp-admin/install.phpYou should see a Wordpress Welcome/Setup page. Follow the prompts on screen and enter the appropriate information. Use the Database Name, Username and Password you configured above.Set the title to Your Name's Blog. For example: &quot;Candice Carman's Blog&quot;Set the username to your Seneca ID.Set the password to your Seneca ID. You may need to check the box to Confirm use of weak passwordSet the email to your Seneca email address.Click &quot;Install Wordpress&quot;, you should see a &quot;Success!&quot; message.  ","version":"Next","tagName":"h2"},{"title":"Blog Post:​","type":1,"pageTitle":"Lab 5 - RDS","url":"/OPS345/Labs/lab5#blog-post","content":" Add a blog post detailing the following:  How did you find this lab?What was the most difficult part for you?What was the easiest part for you?  ","version":"Next","tagName":"h3"},{"title":"Lab 5 Sign-Off​","type":1,"pageTitle":"Lab 5 - RDS","url":"/OPS345/Labs/lab5#lab-5-sign-off","content":" Take screenshots showing the following:  A successful connection to the database from your www instance.Your blog post  ","version":"Next","tagName":"h2"},{"title":"Exploration Questions​","type":1,"pageTitle":"Lab 5 - RDS","url":"/OPS345/Labs/lab5#exploration-questions","content":" What is an RDS? ","version":"Next","tagName":"h2"},{"title":"Lab 6 - ECS","type":0,"sectionRef":"#","url":"/OPS345/Labs/lab6","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#overview","content":" ","version":"Next","tagName":"h2"},{"title":"Investigation 1: Creating a local web application using Docker​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#investigation-1-creating-a-local-web-application-using-docker","content":" ","version":"Next","tagName":"h2"},{"title":"Install docker​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#install-docker","content":" WindowsMacLinux  ","version":"Next","tagName":"h3"},{"title":"Creating a web page​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#creating-a-web-page","content":" Create a local directory called lab6.Open a text editor (like VS Code) and create the file index.html with the following contents. Save it in the lab6 directory.  &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;My Web Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello World&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;   Using a text editor, create the following docker file. Save it as Dockerfile in the lab6 directory.  FROM httpd:latest WORKDIR /usr/local/apache2/htdocs COPY . /usr/local/apache2/htdocs EXPOSE 80   ","version":"Next","tagName":"h3"},{"title":"Building and running your application​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#building-and-running-your-application","content":" docker build -t my-apache-app . docker run --name my-apache-app -d -p 80:80 -t my-apache-app   ","version":"Next","tagName":"h3"},{"title":"Viewing your web page​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#viewing-your-web-page","content":" Open a browser and enter localhost in the URL barYou should see your webpage  ","version":"Next","tagName":"h3"},{"title":"Pushing your code to dockerhub​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#pushing-your-code-to-dockerhub","content":" Creating a dockerhub account and repository​  Create a dockerhub account: https://hub.docker.comCreate a repository. Name it my-apache-app  Generating a gpg key locally​  gpg --generate-key  Generate a personal access token​  Generate a personal access token on dockerhub - save this. Generate GPG key  gpg --generate-key   Initialize the key  pass init ID   Login  docker login -u username   Paste the PAT Tag your local image  docker tag local-image:my-apache-app new-repo:my-apache-app   Pushing your local docker file to dockerhub​  Push your image to docker hub  docker push jmcarman/my-apache-app:latest   ","version":"Next","tagName":"h3"},{"title":"Investigation 2: Amazon ECS (Elastic Container Service) Configuration​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#investigation-2-amazon-ecs-elastic-container-service-configuration","content":" [!NOTE] These instructions have been updated to use the new ECS UI. If you notice any bugs in the instructions, please let your professor know so that they can be fixed.  Now that we have a general idea of what ECS entails, we'll learn how it works by manually setting-up an ECS Cluster, Service, and Task for our my-apache-app microservice.  Start the AWS Academy Learner Lab and AWS Console. Search for Elastic Container Service.We'll need to define our Container definition, Task definition, Service, and Cluster, and we'll begin with the Task Definition.  ","version":"Next","tagName":"h2"},{"title":"Task Definition​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#task-definition","content":" As we said above, the Task Definition defines how to run our container with ECS. Let's create one for our my-apache-app server:  In the Amazon Elastic Container Service console, choose Task definitions in the left-hand menu  Task definition configuration​  Click the Create new task definition button and Create new task definition.In the Task definition configuration, give your new task definition a family name: my-apache-app. This name will be the basis for the many individual task definition versions that we will create in the coming weeks.  Infrastructure requirements​  As we know from our work with EC2, running a container on AWS requires compute resources (e.g., EC2 instances), and these need to be provisioned and set with sufficient resources. Previously we did this manually, but now we will use the managed Fargate service to handle our compute.  Under Infrastructure requirements we specify the infrastructure computing needs for our task. We will be using AWS Fargate serverless compute and Linux/X86_64 for our Operating system/Architecture.For our Task size, we need to define how much CPU and Memory to allocate. To start, our needs are modest: we can use .25 vCPU and .5 GB Memory.In terms of security, we need to define two different IAM Roles within our AWS account. First, the Task role specifies the rights that the container running within the task will have (e.g., to be able to access other AWS resources in our account); second, the Task execution role specifies what rights that the ECS cluster and infrastructure will have (e.g., to access resources like our ECR repo). Set both of these roles to the pre-defined LabRole AWS Role, which will grant them access to any resources we own.  Container - 1​  Next we define the container (or containers if running multiple), that will be run in our task. This step is a bit like defining the options to pass to docker run on the command line.  [!IMPORTANT] In order to make the following changes work, your Docker image needs to use the root user. If you have previously set USER node or similar, you'll need to remove this and use the default root user instead. This is necessary because we are going to use a privileged port (i.e., port below 1024), which requires elevated rights. You should make that change if necessary then push new images to your Docker registries. If you do not do this, your server will crash with an EACCESS: permission denied 0.0.0.0:80 error when it tries to listen on port 80.  For the Container details, use a Name of my-apache-app, an Image URI with your Docker Hub my-apache-app image and the latest tag URI (i.e., jmcarman/my-apache-app:latest), and specify Yes for Essential container, since we can't run our task without this container.For the Port mappings, we'll use the production HTTP port, 80. This is the default configuration: Container port is 80, uses the TCP Protocol, and that the App protocol is HTTP. You can leave the Port name empty.For the Resource allocation limits, specify the amount of CPU, .25, and Memory, .5 for the Memory soft limit. This means your container will reserve 512 MiB of RAM when it starts (a Hard limit would define the maximum memory allowed, which we won't set).The default values for Logging are good. ECS will use the Amazon CloudWatch service to collect our container logs into a Log Group named /ecs/fragments-task. You should write this down for later, when you need to see the logs for your server.The default values for Storage are also good, since we won't be storing our data on disk (i.e., currently we use an in-memory database and later we'll use Amazon database services).  Everything else should be good using the default configuration. You can now click the Create button.  Your my-apache-app Task Definition is now created, and you can inspect or edit it at any time by coming back to Amazon Elastic Container Service &gt; Task definitions &gt; my-apache-app. When you do make changes, a new version will be created (i.e., this first version is Revision 1, my-apache-app:1).  ","version":"Next","tagName":"h3"},{"title":"Investigation 3: Creating a Cluster​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#investigation-3-creating-a-cluster","content":" Next we need to create a cluster where we can run our task.  Click the Create cluster buttonGive your cluster a name: my-apache-appUnder Infrastructure, choose AWS Fargate (serverless)The default settings are good for all other optionsClick the Create button  It will take a minute or two for the cluster to be fully created. Once it is, move on to create your Service.  ","version":"Next","tagName":"h2"},{"title":"Creating a service​","type":1,"pageTitle":"Lab 6 - ECS","url":"/OPS345/Labs/lab6#creating-a-service","content":" The final step is to create a Service within our cluster. A service is responsible for deploying, managing, and monitoring our tasks (and the containers they run).  Click on the newly created my-apache-app cluster, then under Services, click the Create button  For our service's Environment we will use our Existing cluster, my-apache-app. The Compute configuration should be set to Launch Type instead of the more advanced Capacity provider strategy. Our Launch type will be FARGATE and the Platform version will be LATEST. This will allow our service to directly launch instances via Fargate to run our tasks.  Service Details​  For the Task definition, choose the Family we created in the previous steps, my-apache-app, and the only Revision we have, 1 (LATEST). Our service will use this task definition to create and manage our task for us.Next, select the default Service name.  Deployment configuration​  We will use a Service type of Replica, which allows us to run multiple, simultaneous versions of our task for high-availability. To start, we'll choose to set the Desired tasks to 1 (i.e., only run a single task with a single instance of our server).Leave the rest of the defaults.  Networking​  Under VPC select Wordpress VPCUnder Subnets make sure the following are selected (they should be by default)  Public Subnet 1Public Subnet 2Private Subnet 1Private Subnet 2  Security Group​  Under Security group select Use an existing security groupFrom the Security group name drop down menu check Wordpress Website SG and uncheck defaultLeave Public IP as Turned on to auto-assign a public IP to your tasks.  Click Create. It may take several minutes to create. ","version":"Next","tagName":"h3"},{"title":"Weekly Schedule","type":0,"sectionRef":"#","url":"/OPS345/weekly-schedule","content":"","keywords":"","version":"Next"},{"title":"Quick Links​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#quick-links","content":" Weekly Schedule\tCourse Outline\tLab Logbook\tAssignment 1\tAssignment 2  ","version":"Next","tagName":"h2"},{"title":"Week 1​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-1","content":" Topic\tReferences\tEvaluationIntroduction to Amazon Web Services (AWS)\tLecture Slides\tLab 1 Worth 3% (Due Week 8)  ","version":"Next","tagName":"h2"},{"title":"Week 2​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-2","content":" Topic\tReferences\tEvaluationAmazon Web Services (AWS) Networking\tLecture Slides\tLab 2 Worth 3% (Due Week 8)  ","version":"Next","tagName":"h2"},{"title":"Week 3​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-3","content":" Topic\tReferences\tEvaluationApache\tLecture Slides\tLab 3 Worth 3% (Due Week 8)  ","version":"Next","tagName":"h2"},{"title":"Week 4​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-4","content":" Topic\tReferences\tEvaluationDNS / SSL\tLecture Slides\tLab 4 Worth 3% (Due Week 8)  ","version":"Next","tagName":"h2"},{"title":"Week 5​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-5","content":" Topic\tReferences\tEvaluationAmazon Relational Databases\tLecture Slides\tLab 5 Worth 3% (Due Week 13)  ","version":"Next","tagName":"h2"},{"title":"Week 6​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-6","content":" Topic\tReferences\tEvaluationAssignment 1 Assignment 1 Worth 15% (Due Week 9)  ","version":"Next","tagName":"h2"},{"title":"Week 7​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-7","content":" Topic\tReferences\tEvaluationTest 20%  ","version":"Next","tagName":"h2"},{"title":"Week 8​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-8","content":" Topic\tReferences\tEvaluationAmazon Elastic Container Service (ECS) Lab 6 Worth 3% (Due Week 13)  ","version":"Next","tagName":"h2"},{"title":"Week 9​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-9","content":" Topic\tReferences\tEvaluationSimple Storage Service (S3) Glacier Lab 7 Worth 3% (Due Week 13)  ","version":"Next","tagName":"h2"},{"title":"Week 10​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-10","content":" Topic\tReferences\tEvaluationElastic Beanstalk Lab 8 Worth 3% (Due Week 13)  ","version":"Next","tagName":"h2"},{"title":"Week 11​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-11","content":" Topic\tReferences\tEvaluation Assignment 2 Worth 15% (Due Week 13)  ","version":"Next","tagName":"h2"},{"title":"Week 12​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-12","content":" Topic\tReferences\tEvaluationWork period   ","version":"Next","tagName":"h2"},{"title":"Week 13​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-13","content":" Topic\tReferences\tEvaluationReview / Work period   ","version":"Next","tagName":"h2"},{"title":"Week 14​","type":1,"pageTitle":"Weekly Schedule","url":"/OPS345/weekly-schedule#week-14","content":" Topic\tReferences\tEvaluationTest 20% ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}